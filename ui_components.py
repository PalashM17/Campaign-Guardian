import streamlit as st
import pandas as pd
import plotly.graph_objects as go
from datetime import datetime
import io
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import letter, A4
from reportlab.lib import colors
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle

class UIComponents:
    def __init__(self):
        self.severity_colors = {
            'L1': '#FFA500',  # Orange
            'L2': '#FF6B35',  # Red-Orange  
            'L3': '#DC143C'   # Crimson
        }
        
        self.severity_icons = {
            'L1': '‚ö†Ô∏è',
            'L2': 'üî•', 
            'L3': 'üö®'
        }
    
    def show_email_modal(self, campaign_name, anomaly_data):
        """Display email alert modal"""
        if anomaly_data is not None:
            subject = f"‚ö†Ô∏è {anomaly_data['metric'].upper()} Anomaly Alert - {campaign_name}"
            
            # Calculate estimated impact
            deviation = abs(anomaly_data['deviation_percent'])
            estimated_impact = f"‚Çπ{(deviation * 1000):,.0f}"  # Simplified calculation
            
            body = f"""
**Campaign Alert Notification**

**Campaign:** {campaign_name}
**Metric:** {anomaly_data['metric'].upper()}
**Severity:** {anomaly_data['severity']} ({anomaly_data['severity']})
**Timestamp:** {anomaly_data['timestamp'].strftime('%Y-%m-%d %H:%M')}

**Issue Details:**
‚Ä¢ Expected Value: {anomaly_data['expected_value']:.2f}
‚Ä¢ Observed Value: {anomaly_data['observed_value']:.2f}
‚Ä¢ Deviation: {anomaly_data['deviation_percent']:.1f}%
‚Ä¢ Z-Score: {anomaly_data['z_score']:.2f}

**Estimated Impact:** {estimated_impact}

**Recommended Actions:**
1. Review campaign settings immediately
2. Check for external factors affecting performance
3. Consider budget reallocation if necessary
4. Monitor closely for next 24 hours

This alert was generated by Campaign Guardian Anomaly Detection System.
            """
            
            # Display in expander
            with st.expander("üìß Email Alert Preview", expanded=True):
                st.text_input("To:", value="campaign.manager@company.com", disabled=True)
                st.text_input("Subject:", value=subject, disabled=True)
                st.text_area("Body:", value=body, height=300, disabled=True)
                
                col1, col2 = st.columns(2)
                with col1:
                    if st.button("Send Email", type="primary"):
                        st.success("‚úÖ Email alert sent successfully!")
                with col2:
                    if st.button("Copy to Clipboard"):
                        st.info("üìã Email content copied to clipboard!")
        else:
            st.error("No anomaly data available for email alert.")
    
    def create_metric_card(self, title, value, delta=None, delta_color="normal"):
        """Create a styled metric card"""
        col1, col2, col3 = st.columns([1, 2, 1])
        with col2:
            if delta is not None:
                st.metric(
                    label=title,
                    value=value,
                    delta=delta,
                    delta_color=delta_color
                )
            else:
                st.metric(label=title, value=value)
    
    def create_severity_badge(self, severity):
        """Create a colored severity badge"""
        icon = self.severity_icons.get(severity, '‚ö™')
        color = self.severity_colors.get(severity, '#808080')
        
        return f'<span style="background-color: {color}; color: white; padding: 2px 8px; border-radius: 12px; font-size: 12px; font-weight: bold;">{icon} {severity}</span>'
    
    def create_anomaly_chart(self, data, metric, anomalies=None):
        """Create an interactive anomaly detection chart"""
        fig = go.Figure()
        
        # Add main time series
        fig.add_trace(go.Scatter(
            x=data['timestamp'],
            y=data[metric],
            mode='lines+markers',
            name='Observed',
            line=dict(color='#1f77b4', width=2),
            marker=dict(size=4),
            hovertemplate=f'{metric.upper()}: %{{y:.2f}}<br>Time: %{{x}}<extra></extra>'
        ))
        
        # Add rolling average if available
        if 'rolling_mean' in data.columns:
            fig.add_trace(go.Scatter(
                x=data['timestamp'],
                y=data['rolling_mean'],
                mode='lines',
                name='7-day Average',
                line=dict(color='#2ca02c', width=2, dash='dash'),
                hovertemplate=f'Average: %{{y:.2f}}<br>Time: %{{x}}<extra></extra>'
            ))
        
        # Add anomaly points
        if anomalies and len(anomalies) > 0:
            anomaly_df = pd.DataFrame(anomalies)
            
            # Group by severity for different colors
            for severity in ['L1', 'L2', 'L3']:
                severity_anomalies = anomaly_df[anomaly_df['severity'] == severity]
                if len(severity_anomalies) > 0:
                    fig.add_trace(go.Scatter(
                        x=severity_anomalies['timestamp'],
                        y=severity_anomalies['observed_value'],
                        mode='markers',
                        name=f'{severity} Anomalies',
                        marker=dict(
                            color=self.severity_colors[severity],
                            size=10,
                            symbol='diamond',
                            line=dict(width=2, color='white')
                        ),
                        hovertemplate=f'Anomaly ({severity})<br>Value: %{{y:.2f}}<br>Deviation: {severity_anomalies["deviation_percent"].iloc[0]:.1f}%<extra></extra>' if len(severity_anomalies) > 0 else ""
                    ))
        
        # Update layout
        fig.update_layout(
            title=f'{metric.upper()} Anomaly Detection',
            xaxis_title='Time',
            yaxis_title=metric.upper(),
            height=400,
            showlegend=True,
            hovermode='x unified',
            template='plotly_white'
        )
        
        return fig
    
    def create_dashboard_summary(self, anomalies_data):
        """Create summary dashboard cards"""
        if not anomalies_data:
            st.info("‚úÖ No anomalies detected")
            return
        
        # Count by severity
        severity_counts = {}
        for anomaly in anomalies_data:
            severity = anomaly['severity']
            severity_counts[severity] = severity_counts.get(severity, 0) + 1
        
        # Display summary cards
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            total = len(anomalies_data)
            st.metric("Total Anomalies", total)
        
        with col2:
            l3_count = severity_counts.get('L3', 0)
            st.metric("Critical (L3)", l3_count, delta_color="inverse" if l3_count > 0 else "normal")
        
        with col3:
            l2_count = severity_counts.get('L2', 0)
            st.metric("Moderate (L2)", l2_count, delta_color="inverse" if l2_count > 0 else "normal")
        
        with col4:
            l1_count = severity_counts.get('L1', 0)
            st.metric("Mild (L1)", l1_count, delta_color="off")
    
    def create_recommendations_panel(self, anomaly, recommendations):
        """Create recommendations panel for an anomaly"""
        st.subheader(f"üéØ Recommendations for {anomaly['metric'].upper()} {anomaly['direction'].title()}")
        
        # Show anomaly details
        col1, col2 = st.columns(2)
        with col1:
            st.write(f"**Severity:** {self.create_severity_badge(anomaly['severity'])}", unsafe_allow_html=True)
            st.write(f"**Deviation:** {anomaly['deviation_percent']:.1f}%")
        with col2:
            st.write(f"**Z-Score:** {anomaly['z_score']:.2f}")
            st.write(f"**Confidence:** {anomaly.get('confidence', 85):.0f}%")
        
        # Show recommendations
        st.write("**Recommended Actions:**")
        for i, rec in enumerate(recommendations, 1):
            st.write(f"{i}. {rec}")
    
    def export_anomaly_report(self, anomalies_data, campaign_name, campaign_info=None):
        """Generate comprehensive anomaly report with campaign context"""
        if not anomalies_data:
            st.warning("No anomalies to export")
            return None
        
        # Create detailed report dataframe
        report_df = pd.DataFrame(anomalies_data)
        
        # Add campaign context if provided
        if campaign_info is not None:
            report_df['campaign_name'] = campaign_name
            report_df['platform'] = campaign_info.get('platform', 'Unknown')
            report_df['target_group'] = campaign_info.get('target_group', 'Unknown')
            report_df['campaign_budget'] = campaign_info.get('daily_budget', 0)
        
        # Calculate business impact estimates
        def calculate_impact(row):
            if row['metric'] == 'spend':
                return abs(row['deviation_percent']) * campaign_info.get('daily_budget', 10000) / 100
            elif row['metric'] == 'conversions':
                conversion_value = 200  # Assumed average
                return abs(row['observed_value'] - row['expected_value']) * conversion_value
            else:
                return abs(row['deviation_percent']) * campaign_info.get('daily_budget', 10000) * 0.1 / 100
        
        if campaign_info:
            report_df['estimated_impact_inr'] = report_df.apply(calculate_impact, axis=1)
        
        # Format for export
        export_columns = ['campaign_name', 'platform', 'timestamp', 'metric', 'severity',
                         'observed_value', 'expected_value', 'deviation_percent', 'z_score', 
                         'direction', 'estimated_impact_inr'] if campaign_info else \
                        ['timestamp', 'metric', 'observed_value', 'expected_value', 
                         'deviation_percent', 'z_score', 'severity', 'direction']
        
        available_columns = [col for col in export_columns if col in report_df.columns]
        export_df = report_df[available_columns].copy()
        
        # Format columns
        if 'timestamp' in export_df.columns:
            # Handle both datetime and string timestamps
            if hasattr(export_df['timestamp'].iloc[0], 'strftime'):
                export_df['timestamp'] = export_df['timestamp'].dt.strftime('%Y-%m-%d %H:%M:%S')
            else:
                export_df['timestamp'] = export_df['timestamp'].astype(str)
        
        # Round numeric columns
        numeric_columns = ['observed_value', 'expected_value', 'deviation_percent', 'z_score']
        if 'estimated_impact_inr' in export_df.columns:
            numeric_columns.append('estimated_impact_inr')
            
        for col in numeric_columns:
            if col in export_df.columns:
                export_df[col] = export_df[col].round(2)
        
        return export_df
    
    def create_download_button(self, data, filename, file_type="csv", label=None):
        """Create download button for data export"""
        if data is None:
            return
        
        try:
            if hasattr(data, 'empty') and data.empty:
                return
            
            if file_type == "csv":
                content = data.to_csv(index=False)
                mime_type = "text/csv"
            else:
                return
            
            if label is None:
                label = f"üìä Download {file_type.upper()}"
            
            st.download_button(
                label=label,
                data=content,
                file_name=filename,
                mime=mime_type,
                key=f"download_{filename}_{datetime.now().strftime('%H%M%S')}"
            )
        except Exception as e:
            st.error(f"Error creating download button: {str(e)}")
    
    def export_chart_as_image(self, fig, filename, format="png"):
        """Export plotly chart as image"""
        try:
            if format.lower() == "png":
                img_bytes = fig.to_image(format="png", engine="kaleido")
                mime_type = "image/png"
            elif format.lower() == "pdf":
                img_bytes = fig.to_image(format="pdf", engine="kaleido")
                mime_type = "application/pdf"
            else:
                return None, None
                
            return img_bytes, mime_type
        except Exception as e:
            st.error(f"Error exporting chart: {str(e)}")
            return None, None
    
    def create_anomaly_pdf_report(self, anomalies_data, campaign_name, campaign_info=None):
        """Generate comprehensive PDF report using ReportLab"""
        if not anomalies_data:
            return None
        
        try:
            # Create PDF buffer
            buffer = io.BytesIO()
            doc = SimpleDocTemplate(buffer, pagesize=A4)
            
            # Styles
            styles = getSampleStyleSheet()
            title_style = ParagraphStyle(
                'CustomTitle',
                parent=styles['Heading1'],
                fontSize=18,
                spaceAfter=30,
                textColor=colors.darkblue,
                alignment=1  # Center
            )
            
            # Build PDF content
            story = []
            
            # Title
            title = Paragraph("Campaign Guardian - Anomaly Report", title_style)
            story.append(title)
            story.append(Spacer(1, 20))
            
            # Campaign summary
            if campaign_info:
                summary_data = [
                    ['Campaign Name', campaign_name],
                    ['Platform', campaign_info.get('platform', 'Unknown')],
                    ['Target Group', campaign_info.get('target_group', 'Unknown')],
                    ['Daily Budget', f"‚Çπ{campaign_info.get('daily_budget', 0):,.0f}"],
                    ['Report Generated', datetime.now().strftime('%Y-%m-%d %H:%M:%S')]
                ]
                
                summary_table = Table(summary_data, colWidths=[2*72, 3*72])
                summary_table.setStyle(TableStyle([
                    ('BACKGROUND', (0, 0), (-1, 0), colors.lightblue),
                    ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                    ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                    ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                    ('FONTSIZE', (0, 0), (-1, 0), 12),
                    ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                    ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
                    ('GRID', (0, 0), (-1, -1), 1, colors.black)
                ]))
                
                story.append(summary_table)
                story.append(Spacer(1, 20))
            
            # Anomalies data
            if len(anomalies_data) > 0:
                # Create table data
                headers = ['Timestamp', 'Metric', 'Severity', 'Deviation %', 'Z-Score', 'Impact']
                table_data = [headers]
                
                for anomaly in anomalies_data[:20]:  # Limit to first 20 anomalies
                    impact = f"‚Çπ{abs(anomaly.get('deviation_percent', 0)) * 100:,.0f}" if anomaly.get('metric') == 'spend' else f"{abs(anomaly.get('deviation_percent', 0)):.1f}%"
                    
                    timestamp_str = ""
                    if 'timestamp' in anomaly:
                        ts = anomaly['timestamp']
                        if hasattr(ts, 'strftime'):
                            timestamp_str = ts.strftime('%m/%d %H:%M')
                        else:
                            timestamp_str = str(ts)
                    
                    row = [
                        timestamp_str,
                        anomaly.get('metric', '').upper(),
                        anomaly.get('severity', ''),
                        f"{anomaly.get('deviation_percent', 0):.1f}%",
                        f"{anomaly.get('z_score', 0):.2f}",
                        impact
                    ]
                    table_data.append(row)
                
                # Create table
                anomaly_table = Table(table_data, colWidths=[1.2*72, 0.8*72, 0.7*72, 0.9*72, 0.7*72, 0.9*72])
                anomaly_table.setStyle(TableStyle([
                    ('BACKGROUND', (0, 0), (-1, 0), colors.darkblue),
                    ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                    ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                    ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                    ('FONTSIZE', (0, 0), (-1, 0), 10),
                    ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                    ('BACKGROUND', (0, 1), (-1, -1), colors.lightgrey),
                    ('GRID', (0, 0), (-1, -1), 1, colors.black),
                    ('FONTSIZE', (0, 1), (-1, -1), 9),
                ]))
                
                story.append(Paragraph("Detected Anomalies", styles['Heading2']))
                story.append(Spacer(1, 10))
                story.append(anomaly_table)
            
            # Build PDF
            doc.build(story)
            pdf_bytes = buffer.getvalue()
            buffer.close()
            
            return pdf_bytes
        except Exception as e:
            st.error(f"Error generating PDF report: {str(e)}")
            return None